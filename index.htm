<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="css/bootstrap.css">
<link href='http://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700' rel='stylesheet' type='text/css'>
<link rel="stylesheet" href="css/main.css">
<script src=http://code.jquery.com/jquery-2.0.3.min.js></script>
<script src=http:////netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js></script>
<script src=js/handlebars-v1.1.2.js></script>
<script src=js/amplify.min.js></script>

<!-- Define default template -->
<script data-body type="text/x-handlebars-template">
{{>header}}
{{>body}}
</script>
<!-- Include header -->
<script data-name="header" src="tmpl/header.tmpl"></script>

<script data-name="body" type="text/x-handlebars-template">
<div class="page-header" style="background:#fff">
	<div class="container">
		<div class="dropdown">
			<a href="#" data-toggle="dropdown"><h2>Everything <img src="img/fravr-dropdown.png"></h2></a>
			<ul class="dropdown-menu">
				<li><a href="#">Everything</a></li>
				<li><a href="#">Social</a></li>
				<li><a href="#">Recommended</a></li>
			</ul>
		</div>
	</div>
</div>
<div class="fravr-timeline">
<div class="container">
</div>
</div>
<!--
<div class="fravr-timeline">
<div class="container">
	<div class="row">
		<div class="col-md-6">
		</div>
		<div class="col-md-6">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-md-4">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
		<div class="col-md-4">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
		<div class="col-md-4">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-md-6">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
		<div class="col-md-6">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-md-3">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
		<div class="col-md-3">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
		<div class="col-md-3">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
		<div class="col-md-3">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-md-6">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
		<div class="col-md-6">
			<div class="item">
				<img src="img/products/Brick Full Grain NYC NATO Watch Strap by Worn & Wound 59.jpg">
				<span class="title">Brick Full Grain NYC NATO Watch Strap</span>
				<span class="subtitle">by Sinn</span>
			</div>
		</div>
	</div>
</div>
</div>
-->
</script>
<script data-item type="text/x-handlebars-template">
<div class="item">
	<div class="crop"><img src="{{product.img_urls.0.url}}"></div>
	<span class="title">{{product.name}}</span>
	{{#if actions}}
		{{#ifequals actions.length 0}}
		<span class="subtitle">by {{product.merchant}}</span>
		{{else}}
			{{#ifequals actions.length 1}}
				{{#ifequals actions.0.action 'purchase'}}
					<span class="subtitle">by {{product.merchant}}</span>
				{{/ifequals}}
			{{else}}
			<span class="subtitle">by {{product.merchant}}</span>
			{{/ifequals}}
		{{/ifequals}}
	{{else}}
	<span class="subtitle">by {{product.merchant}}</span>
	{{/if}}
</div>
</script>
<script src=data/data.js></script>
<script src=js/main.js></script>
<!-- Events -->
<script>
//Compile timeline template
Template.set('timeline', $('script[data-item]').html());

//Generate html code in body and register partial 'timeline'
var Timeline = function (type) {
	var that = {};
	var count = Data.timeline[type].length,
		pointer = 0,
		buffer = [],
		completePattern = [],
		maxRDiff = 0.05,
		lastPattern = [];

	that.allSizesLoaded = false; // flag to stop loop

	that.getRW = function (wh) {
		var r = wh.h/wh.w;

		if (r < 1/3) {
			return { r: r, w: [12]};
		} else if (r >=2) {
			return { r: 2, w: [3]};
		} else {
			var w = [];
			for (var h=3; h<=9; h+=1) {
				if (r*h <= 6) {
					w.push(h);
				}
			}
			var result = { r: r, w: w};
			
			// Correct up to maximum allowable difference
			var rAdjusted = r-r*maxRDiff;
			if (rAdjusted < 1/3) {
				rAdjusted = 1/3;
			}
			var wAdjusted = [];
			for (var h=3; h<=9; h+=1) {
				if (rAdjusted*h <= 6) {
					wAdjusted.push(h);
				}
			}
			if (wAdjusted.length > result.w.length) {
				return { r: rAdjusted, w: wAdjusted};
			} else {
				return result;
			}
		}

// 
// 		if (r < rAllowed[0].r) {
// 			return { r: r, w: [12]};
// 		} else if (r >= rAllowed[rAllowed.length - 1]) {
// 			return { r: 2, w: [3]};
// 		} else {
// 			var index = Math.floor((Math.log(r) - Math.log(rAllowed[0].r)) / Math.log(100/95));
// 			return rAllowed[index];
// 		}
	}

	that.getPLeft = function (rw,pLeft_old) {
		var	pattern = [
			{
				p: [6,6],
			},
			{
				p: [3,3,3,3],
			},
			{
				p: [4,4,4],
			},
			{
				p: [3,9],
			},
			{
				p: [4,8],
			},
			{
				p: [3,3,6],
			},
			{
				p: [5,7],
			},
			{
				p: [3,4,5],
			}
		];
		var pLeft = [];
		var vw = $('.fravr-timeline > div').width()+30; // Width of pattern row in pixels

		if (typeof pLeft_old === 'object') {
			for (var i=0; i<pLeft_old.length; i+=1) {
				// Copy object
				var obj = $.extend(true, {}, pLeft_old[i]);
				for (var j=0; j<obj.pr.length; j+=1) {
					//Calculate difference of r
					if (obj.pr[j].r >= rw.r) {
						var rDiff = (obj.pr[j].r - rw.r)/obj.pr[j].r;
					} else {
						var rDiff = (rw.r - obj.pr[j].r)/rw.r;
					}
					// If difference is less than max allowable difference,
					// modify pLeft and return
					if (rDiff < maxRDiff) {
						console.log('hit');
						// Add to used possibility
						obj.wt.push({
							t: rw.t,
							w: obj.pr[j].p,
							r: obj.pr[j].r
						});
						obj.pr.splice(j,1); // Remove from possiblity left
						if (obj.pr.length === 0) {
							console.log('complete');
							completePattern.push(obj);
						}
						break;
					}
				}
				pLeft.push(obj);
			}
			return pLeft;
		} else {
			for (var i=0; i<rw.w.length; i+=1) {
				for (var j=0; j<pattern.length; j+=1) {
					var index = $.inArray(rw.w[i], pattern[j].p);
					if (index >= 0) {
						var p = pattern[j].p.slice(0); //copy array
						var obj = {
							wt: [{
								w: p.splice(index,1)[0], //remove matched w from array
								t: rw.t, //timeline index
								r: rw.r //store r related
							}],
							op: pattern[j].p, // Original P
							pr: [] //P left
						};
						for (var k=0; k<p.length; k+=1) {
							obj.pr.push({
								p: p[k],
								r: rw.r*(pattern[j].p[index]/12*vw-20)/(p[k]/12*vw-20)
							});
						}
						pLeft.push(obj);
					}
				}
			}
			return pLeft;
		}
	}

	that.getCP = function () {
		return completePattern;
	};

	that.setCP = function (array) {
		completePattern = array;
	};

	that.loadSize = function (num, successCallback) {
		var imgLoadCount = 0;
		for (var y=pointer+num; pointer<y; pointer+=1) {
			if (typeof Data.timeline[type][pointer] === 'undefined') break;
			var image = new Image();
			$(image).load(function (timelineItem) {
					var that = function () {
						var width = $(this).width();
						var height = $(this).height();
						Data.timeline[type][timelineItem].product.img_urls[0].size = {
							width: width,
							height: height,
							hdw: height/width
						}
						$(this).remove(); //Remove this image from DOM
						imgLoadCount += 1;
						if (imgLoadCount === num) {
							successCallback(pointer);
						};
					};
					return that;
				}(pointer));
			$(image).css('display','none')
				.attr('src', Data.timeline[type][pointer].product.img_urls[0].url)
				.appendTo('body');
		}
		// When loop is broken prematurely
		if (pointer != y) {
			that.allSizesLoaded = true;
			return 'All sizes loaded';
		}
	}

	that.loadNext = function (callBack) {
		that.loadSize(1, function (pointer) {
			// Add image to buffer
			buffer.push(Data.timeline[type][pointer-1].product.img_urls[0].size);
			var rw = that.getRW({
				h: buffer[buffer.length-1].height,
				w: buffer[buffer.length-1].width
			});
			buffer[buffer.length-1].r = rw.r;
			buffer[buffer.length-1].w = rw.w;
			buffer[buffer.length-1].timelineIndex = pointer-1;
			rw.t= pointer-1;
			buffer[buffer.length-1].pLeft = that.getPLeft(rw);

			// For each image in buffer except the last added
			for (var i=0; i<buffer.length-1; i+=1) {
				// update possibilities
				buffer[i].pLeft = that.getPLeft({
					r: buffer[buffer.length-1].r,
					w: buffer[buffer.length-1].w,
					t: buffer[buffer.length-1].timelineIndex
				}, buffer[i].pLeft);

				// update possiblity of last added image
				buffer[buffer.length-1].pLeft = that.getPLeft({
					r: buffer[i].r,
					w: buffer[i].w,
					t: buffer[i].timelineIndex
				}, buffer[buffer.length-1].pLeft);
			}
			if (typeof callBack === 'object') {
				if (typeof callBack.done === 'function') {
					callBack.done();
				}
			}
		});
	}

	that.addPatternToDom = function () {
		console.log('adding pattern...');
		var cp = that.getCP();

		var isRepeatPattern = function (pattern) {
			var repeated = true;
			for (var i=1; i<pattern.length; i+=1) {
				if (pattern[0] != pattern[i]) {
					repeated = false;
					break;
				}
			}
			return repeated;
		};
		
		var arraysEqual = function (arr1, arr2) {
			if(arr1.length !== arr2.length)
				return false;
			for(var i = arr1.length; i--;) {
				if(arr1[i] !== arr2[i])
					return false;
			}

			return true;
		}

		// Decide which pattern to use
		var bestCP = {};
		for (var i=0; i<cp.length; i+=1) {
			// If pattern is same as last used pattern in DOM and has all same numbers
			if (arraysEqual(lastPattern,cp[i].op) && isRepeatPattern(cp[i].op)) {
				console.log('same pattern as last');
			} else {
				for (var j=0; j<cp[i].wt.length; j+=1) {
					if (typeof bestCP.t === 'undefined') {
						bestCP.t = cp[i].wt[j].t;
						bestCP.i = i;
					} else if (bestCP.t > cp[i].wt[j].t) {
						bestCP.t = cp[i].wt[j].t;
						bestCP.i = i;
					};
				}
			}
		}

		// If a valid pattern is selected
		if (typeof bestCP.i != 'undefined') {
			console.log("Valid pattern: ");
			console.log(cp[bestCP.i]);
			var wt = cp[bestCP.i].wt;

			// Add pattern to DOM
			var row = $("<div class='row'></div>");
			for (var i=0; i<wt.length; i+=1) {
				var col=$("<div class='col-md-" + wt[i].w +"'></div>");
				var item = $(Template.get('timeline')(Data.timeline[type][wt[i].t]));
				var size = Data.timeline[type][wt[i].t].product.img_urls[0].size;
				if (size.hdw < wt[i].r) {
					// Crop width
					var width = (wt[i].r - size.hdw)/wt[i].r*100+100;
					var wCrop = (wt[i].r - size.hdw)/size.hdw*100/-2;
					console.log(wCrop);
					item.find('img').css("width",width+'%').css("margin","0 0 0 " + wCrop + '%');
				} else if (wt[i].r < size.hdw) {
					// Crop height
					var hCrop = (size.hdw - wt[i].r)*100/-2;
					item.find('img').css("margin",hCrop +"% 0 " + hCrop + "% 0");
				} else {
					console.log(size.hdw + '=' + wt[i].r);
				}
				col.append(item);
				row.append(col);
			}
			row.appendTo(".fravr-timeline .container");

			that.onUsePattern(bestCP.i);
		}
	}

	// Invalidate complete patterns and update data when pattern is used
	that.onUsePattern = function (cpIndex) {
		// Copy completed pattern for reference
		var cp = $.extend(true, {}, completePattern[cpIndex]);
		console.log('onUsePattern');
		console.log(cp);
		console.log(buffer);

		lastPattern = completePattern[cpIndex].op.slice(0);
		var completePattern2 = []; // Reset completePattern
		// completePattern.splice(cpIndex,1); // Remove pattern used
		// // For each complete pattern used, check if image is used
		// for (var i=0; i<completePattern.length; i+=1) {
		// 	// For each used image in the pattern
		// 	for (var j=0; j<completePattern[i].wt.length; j+=1) {
		// 		// If index matches any of the used image
		// 		for (var k=0; k<cp.wt.length; k+=1) {
		// 			if (completePattern[i].wt[j].t === cp.wt[k].t) {
		// 				// Add back possibility
		// 				completePattern[i]
		// 			}
		// 		}
		// 	}
		// }
		// For each image in used pattern
		for (var i=0; i<cp.wt.length; i+=1) {
			for (var j=0; j<buffer.length; j+=1) {
				if (buffer[j].timelineIndex === cp.wt[i].t) {
					console.log('matched in cp');
					console.log(buffer.splice(j,1)); // Remove matching image in buffer
					break; // Go to next image in used pattern
				}
			}
		}
		// For each image left in buffer, re-add possibility from used images
		for (var i=0; i<buffer.length; i+=1) {
			// For each pattern
			for (var i2=0; i2<buffer[i].pLeft.length; i2+=1) {
				// For each used image in the pattern
				for (var j=0; j<buffer[i].pLeft[i2].wt.length; j+=1) {
					// Check index if matches any of the used image
					for (var k=0; k<cp.wt.length; k+=1) {
						if (buffer[i].pLeft[i2].wt[j].t === cp.wt[k].t) {
							// Add back possibility
							buffer[i].pLeft[i2].pr.push({
								p: buffer[i].pLeft[i2].wt[j].w,
								r: buffer[i].pLeft[i2].wt[j].r
							});
							// Remove from used possibility
							buffer[i].pLeft[i2].wt.splice(j,1);
							j-=1; // Drop counter by 1 as current is removed
							break; // Break and move to next used image
						}
					}
				}
				// If pattern is still complete, add it back to completed patterns
				if (buffer[i].pLeft[i2].pr.length === 0) {
					completePattern2.push(buffer[i].pLeft[i2]);
					console.log('add back to complete pattern');
				}
			}
		}

		console.log('clean up complete');
		that.setCP(completePattern2);
		console.log(completePattern2);
		console.log(that.getCP());
		console.log(buffer.length);
		console.log(buffer);
	}

	return that;
};

var timeline,
	loadLoop;

$( document ).ready(function () {
	$('a[data-toggle]').on('click', function (event) {
		event.preventDefault();
	});

	timeline = new Timeline('everything');
	// timeline.create();
	loadLoop = function () {
		timeline.loadNext({
			done: function () {
				// Check for completed patterns
				var cp = timeline.getCP();
				if (cp.length > 0) {
					timeline.addPatternToDom();
					// Add to DOM and pattern
					// Remove added index
					// Go through buffer and update possiblities
				} else {
				}
				if (timeline.allSizesLoaded === false) {
					loadLoop();
				}
			}
		});
	}
	loadLoop();
});

// window.onload(function () {
// 	// var timeline = new Timeline('everything');
// 	console.log("asdf");
// });
</script>
</head>

<body style="background:#f1f1f1">
</body>
</html>
